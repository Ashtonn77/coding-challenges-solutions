public class Solution {
    
    IDictionary<string, int> map = new Dictionary<string, int>();

    public int CherryPickup(int[][] grid) {
        return helper(grid, 0, 0, grid[0].Length - 1);       
    }
    
    private int helper(int[][] grid, int row, int col_1, int col_2){
        
        string key = row + "*" + col_1 + "*" + col_2;
            
        if(map.ContainsKey(key)) return map[key];
        
        int numRows = grid.Length;
        int numCols = grid[0].Length;
        
        int[] dc1 = {col_1 - 1, col_1 + 1, col_1};
        int[] dc2 = {col_2 - 1, col_2 + 1, col_2};
        
        int cherries = 0;
        
        cherries += grid[row][col_1];
        
        if(col_1 != col_2)
            cherries += grid[row][col_2];
        
        if(row == numRows - 1)
            return cherries;
        int temp = 0;
        foreach(var m1 in dc1){
            
            foreach(var m2 in dc2){
                
                if(m1 >= 0 && m2 >= 0 && m1 < numCols && m2 < numCols){
                    temp = Math.Max(temp, helper(grid, row + 1, m1, m2));                   
                }
      
            }
            
            
        }
             
        map.Add(key, temp + cherries);
        
        return map[key];
        
    }
    
}
